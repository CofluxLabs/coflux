on:
  push:
    # paths: [clients/python/**]

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install pip --upgrade
          pip install poetry
          poetry install
      - name: Build
        run: poetry build
        with:
          working-directory: clients/python

  publish:
    # if: github.ref == 'ref/heads/main' && github.repository == 'CofluxLabs/coflux'
    runs-on: ubuntu-latest
    needs: [build]
    concurrency: ${{ github.workflow }}-publish
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install pip --upgrade
          pip install poetry httpx
      - name: Check published
        shell: python
        id: checkversion
        run: |
          import os
          import tomllib
          import httpx
          from pathlib import Path

          with open("clients/python/pyproject.toml", "rb") as f:
            version = tomllib.load(f)["tool"]["poetry"]["version"]

          r = httpx.get(f"https://pypi.org/pypi/coflux/{version}/json")
          assert r.status_code in (200, 404), f"unexpected status code: {r.status_code}"
          published = "false" if r.status_code == 404 else "true"
          
          with Path(os.environ["GITHUB_OUTPUT"]).open('a') as f:
              f.write(f"version={version}\n")
              f.write(f"published={published}\n")

      - name: Build
        if: steps.checkversion.outputs.published == 'false'
        run: |
          poetry build
        with:
          working-directory: clients/python
      - name: Publish
        if: steps.checkversion.outputs.published == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: clients/python/dist
      - name: Tag
        if: steps.checkversion.outputs.published == 'false'
        env:
          VERSION: ${{ steps.checkversion.outputs.version }}
        run: |
          git tag -a clients/python/$VERSION -m "Python client version $VERSION"
          git push origin --tags
